name: Demo CRM CI/CD Pipeline (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: demo-crm

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate image tag
      id: generate-tag
      run: |
        TAG="build-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
        
    - name: Pull, retag and push Demo CRM image
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}"
        
        echo "=== CI: Building and Publishing Image ==="
        echo "Pulling original image..."
        docker pull pwstaging/demo-crm:latest
        
        echo "Retagging image..."
        docker tag pwstaging/demo-crm:latest ${IMAGE_NAME}:${TAG}
        docker tag pwstaging/demo-crm:latest ${IMAGE_NAME}:latest
        
        echo "Pushing images..."
        docker push ${IMAGE_NAME}:${TAG}
        docker push ${IMAGE_NAME}:latest
        
        echo "Images pushed successfully to GHCR"
        
    - name: Create kind cluster for testing
      run: |
        echo "=== CD: Creating Test Environment ==="
        # Install kind
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        
        # Create cluster
        kind create cluster --wait 300s
        
        echo "Test cluster created successfully"
        kubectl cluster-info
        kubectl get nodes
        
    - name: Prepare and test deployment
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}"
        
        echo "=== CD: Testing Deployment ==="
        echo "Updating deployment with image: ${IMAGE}"
        sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/deployment.yaml
        
        echo "Deploying to test environment..."
        kubectl apply -f k8s/deployment.yaml
        
        echo "Waiting for deployment..."
        kubectl wait --for=condition=available deployment/demo-crm --timeout=300s
        
        echo "Deployment test successful"
        
    - name: Verify deployment works
      run: |
        echo "=== CD: Verifying Application ==="
        
        kubectl get all
        echo ""
        
        echo "Testing application connectivity..."
        kubectl port-forward deployment/demo-crm 3000:3000 &
        PORT_FORWARD_PID=$!
        
        sleep 15
        
        if curl -f http://localhost:3000/; then
          echo "Application is responding correctly!"
        else
          echo "Application test failed"
          kubectl logs -l app=demo-crm --tail=20
          exit 1
        fi
        
        kill $PORT_FORWARD_PID
        
    - name: Display deployment instructions
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        
        echo "=== CI/CD Pipeline Complete ==="
        echo ""
        echo "CI (Continuous Integration) Results:"
        echo "   Image built: ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}"
        echo "   Image pushed to GHCR: ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:latest"
        echo "   Registry URL: https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }}"
        echo ""
        echo "CD (Continuous Deployment) Results:"
        echo "   Deployment tested in ephemeral cluster"
        echo "   Application health verified"
        echo "   Ready for manual production deployment"
        echo ""
        echo "=== Manual Deployment to Killercoda ==="
        echo ""
        echo "Your image is ready! To deploy to Killercoda:"
        echo ""
        echo "1. In your Killercoda terminal, run:"
        echo "   git clone https://github.com/${{ github.repository }}.git"
        echo "   cd demo-crm"
        echo ""
        echo "2. Update the deployment image:"
        echo "   sed -i 's|IMAGE_PLACEHOLDER|ghcr.io/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${TAG}|g' k8s/deployment.yaml"
        echo ""
        echo "3. Deploy the application:"
        echo "   kubectl apply -f k8s/deployment.yaml"
        echo "   kubectl wait --for=condition=available deployment/demo-crm --timeout=300s"
        echo ""
        echo "4. Access your application:"
        echo "   kubectl port-forward --address 0.0.0.0 deployment/demo-crm 3000:3000"
        echo ""
        echo "5. Use Killercoda Traffic Port Accessor:"
        echo "   - Click three bars in top-right corner"
        echo "   - Select 'Ports' -> Enter '3000' -> Click 'Access'"
        echo ""
        echo "6. Success: You should see Demo CRM with two customer cards!"
        echo ""
        echo "=== Why This Approach? ==="
        echo "- Automated Testing: Proves your deployment works before manual steps"
        echo "- Professional Practice: Separates CI/CD testing from production deployment"
        echo "- Learning Value: Experience both automated and manual deployment workflows"
        echo "- Cost Effective: Uses free tools (kind + GitHub Actions + Killercoda)"
